#!/bin/bash
# shellcheck disable=SC1091
cd /tmp/rom || exit

#--------------------------EDIT FROM HERE--------------------------------
export BOTAPI="$mybot"
export ID="$chatid"
export BUILD_TYPE="ccache" # final or ccache
export METALAVA="true"
export CCACHESIZE="20G"
export LUNCHCOMMAND="lunch corvus_mido-userdebug"
export BUILDCOMMAND="make corvus"
#--------------------------EDIT UPTO HERE--------------------------------

# Functions And imp stuff
sudo apt install jq -y
function tg() {
    TEXT1="$1"
    M_ID=$(curl -s "https://api.telegram.org/bot${BOTAPI}/sendmessage" --data "text=$1&chat_id=${ID}" | jq .result.message_id) 1>/dev/null
}
function tgedit() {
    TEXT2="$2"
    curl -s -X POST https://api.telegram.org/bot"${BOTAPI}"/editMessageText -d chat_id="$ID" -d message_id="$1" -d text="$TEXT2" -d silent=true | jq . 1>/dev/null
}
function tgdoc() {
    curl -F chat_id="${ID}" -F document=@"$1" -F caption="$2" https://api.telegram.org/bot"${BOTAPI}"/sendDocument >/dev/null
}
function del() {
    RESULT=$(curl -sf --data-binary @"${1:--}" https://del.dog/documents) || {
        echo "ERROR: failed to post document" >&2
        return 1
    }
    KEY=$(printf "%s\n" "${RESULT}" | cut -d '"' -f6)
    echo "https://del.dog/${KEY}"
}
function com() {
    tar --use-compress-program="pigz -k -$2 " -cf "$1".tar.gz "$1"
}
function T1() {
    date +"%I:%M%p"
}
function trim() {
    grep -iE 'crash|error|fail|fatal|failed|missing' "$1" &>"Trim-$1"
}

# Rclone
mkdir -p ~/.config/rclone
echo "$rclone_config" >~/.config/rclone/rclone.conf

# Env Variables
rm -rf ./*.txt* ./*.md*
export ERROR_LOG1="ErrorLog.txt"
export TZ="Asia/Kolkata"
export NL=$'\n'

# Ci stats
curl https://raw.githubusercontent.com/ramdibaaz/aosp-builder/main/extra.sh >>extra.sh && chmod +x ./extra.sh && bash extra.sh
tgdoc "stats.md" "New build starts"

# Ccache
export USE_CCACHE=1
export CCACHE_DIR="/tmp/ccache"
export CCACHE_EXEC="$(which ccache)"
export CCACHE_COMPILERCHECK="none"
ccache -M "$CCACHESIZE"
ccache -o compression=true
tg "$(ccache -s)"
export B2="$M_ID"

# Build Info notification
tg "$(date)""$NL""IP:$(curl ipinfo.io/ip) By $USER""$NL""Type:$BUILD_TYPE Metalava:$METALAVA""$NL""ccache:$CCACHESIZE cores:$(nproc)""$NL""+++++++++++++++++++++"
export INFO="$M_ID"

# Before build Steps
source ./build/envsetup.sh && eval "$LUNCHCOMMAND"
tgedit "$INFO" "$TEXT1""$NL""$(T1):Env Setup And Lunch"
export SELINUX_IGNORE_NEVERALLOWS=true

# Make Metalava Seperately
if [[ "$METALAVA" = "true" ]]; then
    tgedit "$INFO" "$TEXT2""$NL""$(T1):Metalava Build Started"
    export WITHOUT_CHECK_API=true
    make api-stubs-docs || echo SKIPPING
    make system-api-stubs-docs || echo SKIPPING
    make test-api-stubs-docs || echo SKIPPING
    make hiddenapi-lists-docs || echo SKIPPING
    tgedit "$INFO" "$TEXT2""$NL""$(T1):Metalava Build Done"
fi

# Final Build Start's Here
tg "BUILD%" && export B3="$M_ID"
eval "$BUILDCOMMAND" | tee "${ERROR_LOG1}" &
sleep 60
export END="$(date +"%I:%M%p" -d "$(date) + 83 minute")"
tgedit "$INFO" "$TEXT2""$NL""$(T1):Main Build upto $END"

# Build %'age and kill in 85m if build type is ccache
if [[ "$BUILD_TYPE" = "ccache" ]]; then
    while test ! -z "$(pidof soong_ui)"; do
        sleep 120
        BUILD_STATS=$(tail <"${ERROR_LOG1}" -n 1 | awk '{ print $2 }')
        tgedit "$B3" "$(T1)=$BUILD_STATS" && tgedit "$B2" "$(ccache -s)"
        if [[ "$(date +"%I:%M%p")" = "$END" ]]; then
            break
        fi
    done
    kill %1
    tgedit "$INFO" "$TEXT2""$NL""$(T1):Killed FOR CCACHE UPLOAD"
else
    while test ! -z "$(pidof soong_ui)"; do
        sleep 120
        BUILD_STATS=$(tail <"${ERROR_LOG1}" -n 1 | awk '{ print $2 }')
        tgedit "$B3" "$(T1)=$BUILD_STATS" && tgedit "$B2" "$(ccache -s)"
    done
fi

# Send logs or exit if no log found
for B4 in *txt; do
    if [ -e "$B4" ]; then
        trim "$B4"
        tgdoc "$B4" "$(del "$B4")"
        tgdoc "Trim-$B4" "$(del Trim-"$B4")"
    else
        break
    fi
done
tgdoc "./out/*log" "out/*log"

# Upload Rom If Zip Found
if ls /tmp/rom/out/target/product/mido/*zip 1>/dev/null 2>&1; then
    for LOOP in /tmp/rom/out/target/product/mido/*zip; do
        if [ -e "$LOOP" ]; then
            rclone copy "$LOOP" GDUP:ROM/ZIP
            tgedit "$INFO" "$TEXT2""$NL""$(T1):Rom Uploaded"
            tg "ROM URL:-https://rom.jrchintu.ga/0:/ZIP/$LOOP"
        else
            break
        fi
    done
else
    tmate -S /tmp/tmate.sock new-session -d &&
        tmate -S /tmp/tmate.sock wait tmate-ready &&
        SENDSHELL=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}') &&
        tgedit "$INFO" "$TEXT2""$NL""$(T1):Build Failed OR Zip Not Found" &&
        tg "$SENDSHELL"
fi

# Upload ccache
if [[ "$BUILD_TYPE" = "ccache" ]]; then
    cd /tmp || exit
    tgedit "$INFO" "$TEXT2""$NL""$(T1):Uploading ccache"
    com ccache 1
    rclone copy ccache.tar.gz GDUP:ROM/CCACHE
    tgedit "$INFO" "$TEXT2""$NL""$(T1):Ccache Uploaded"
    cd /tmp/rom || exit
fi

# Sleep while tmate is running
tgedit "$INFO" "$TEXT2""$NL""$(T1):STOPPED ALL UPTO $END"
sleep 120m
