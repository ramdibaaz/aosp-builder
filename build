#!/bin/bash
cd /tmp/rom || exit # Depends on where source got synced

# Normal build steps
. build/envsetup.sh
lunch aosp_mido-user
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G # It took only 6.4GB for mido
ccache -o compression=true # Will save times and data to download and upload ccache, also negligible performance issue
ccache -z # Clear old stats, so monitor script will provide real ccache statistics

# Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines.
#make api-stubs-docs || echo no problem, we need ccache
#make system-api-stubs-docs || echo no problem we need ccache
#make test-api-stubs-docs || echo no problem, we need ccache
#make aex -j10 & # dont remove that '&'
#sleep 85m
#kill %1
#ccache -s


tg(){
	curl -s "https://api.telegram.org/bot""$mybot""/sendmessage" --data "text=$1&chat_id=$chatid"
}

# Let's compile by parts! Coz of ram issue!
make api-stubs-docs || echo no problem
make system-api-stubs-docs || echo no problem
make test-api-stubs-docs || echo no problem

make aex -j10 \
	tg  "Build Succeed!" \
        && rclone copy out/target/product/mido/*zip GDUP:ROM/ZIP || tmate -S /tmp/tmate.sock new-session -d && tmate -S /tmp/tmate.sock wait tmate-ready && send_shell=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}') && tg "Build Failed" && tg "$send_shell" && ccache -s && sleep 2h
ccache -s # Let's print ccache statistics finally
